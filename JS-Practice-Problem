/*
You are given a string of "s". Your task is to count the number of ways of splitting "s" into three non-empty parts a, b, and c (s = a + b + c) in such a way that a + b, b + c and c + a are all different strings.


NOTE: + refers to string concatenation.

Example

For s = "xzxzx", the output should be solution(s) = 5.

Consider all the ways to split s into three non-empty parts:

If a = "x", b = "z" and c = "xzx", then all a + b = "xz", b + c = "zxzx" and c + a = xzxx are different.
If a = "x", b = "zx" and c = "zx", then all a + b = "xzx", b + c = "zxzx" and c + a = zxx are different.
If a = "x", b = "zxz" and c = "x", then all a + b = "xzxz", b + c = "zxzx" and c + a = xx are different.
If a = "xz", b = "x" and c = "zx", then a + b = b + c = "xzx". Hence, this split is not counted.
If a = "xz", b = "xz" and c = "x", then all a + b = "xzxz", b + c = "xzx" and c + a = xxz are different.
If a = "xzx", b = "z" and c = "x", then all a + b = "xzxz", b + c = "zx" and c + a = xxzx are different.
Since there are five valid ways to split s, the answer is 5.      function solution(s) {
 /*
  0. the number of ways to split the string: 5
  1- 3 + NON EMPTY parts (a, b, c) 
  2- a + b, b + c and c + a are all different strings 
   'x z xzx'
   'x zx zx'
   'x zxz x'
   'xz x zx'
   'xz xz x'
   'xzx z x'
   a + b => xzxz
   b + c => zx
   c + a => xxzx
 */
}
*/


function solution(s) {
    let count  = 0;
    counst len = s.length;

    for (let i = 1; i < len - 1; i++) {
        for (let j = i + 1; j < len; j++) {
            const a = s.slice(0, i); 
            const b = s.slice(i, j);
            const c = s.slice(j);

            const ab = a + b;
            const bc = b + c;
            const ca = c + a; 

            if (ab !== bc && ab !== ca && bc !== ca) {
                count++;
            }
        }
    }

    return count; 
}

const s = "xzxzx";
console.log(solution(s)); // Output: 5

